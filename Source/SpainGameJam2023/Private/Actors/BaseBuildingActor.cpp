// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Actors/BaseBuildingActor.h"
#include "Components/BoxComponent.h"
#include <algorithm>

// Sets default values
ABaseBuildingActor::ABaseBuildingActor()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
	RootComponent = CreateDefaultSubobject<USceneComponent>("Root");
	meshComponent = CreateDefaultSubobject<UStaticMeshComponent>("Mesh");
	meshComponent->SetCollisionEnabled(ECollisionEnabled::NoCollision);
	buildingCollider = CreateDefaultSubobject<UBoxComponent>("BuidlingCollider");
	buildingCollider->SetCollisionProfileName({ "ConstructionBuilding" });

	// Attachments
	meshComponent->AttachToComponent(RootComponent, FAttachmentTransformRules{ EAttachmentRule::KeepRelative, false });
	buildingCollider->AttachToComponent(RootComponent, FAttachmentTransformRules{ EAttachmentRule::KeepRelative, false });

	// Events bindings
	buildingCollider->OnComponentBeginOverlap.AddDynamic(this, &ABaseBuildingActor::OnOverlapBuilding);
	buildingCollider->OnComponentEndOverlap.AddDynamic(this, &ABaseBuildingActor::OnStopOverlapBuilding);

}

// Called when the game starts or when spawned
void ABaseBuildingActor::BeginPlay()
{
	Super::BeginPlay();
	materialInstance = UMaterialInstanceDynamic::Create(material, this);
	materialInstance->SetVectorParameterValue(materialColorVariable, FColor::Green);

	auto components = GetComponentsByClass(UStaticMeshComponent::StaticClass());

	std::for_each(components.begin(), components.end(), [&](UActorComponent* component) {
		auto mesh = Cast<UStaticMeshComponent>(component);
		mesh->SetMaterial(0, materialInstance);
		});
}

// Called every frame
void ABaseBuildingActor::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

}

void ABaseBuildingActor::OnOverlapBuilding(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
{
	materialInstance->SetVectorParameterValue(materialColorVariable, FColor::Red);
	bIsPlaceble = false;
}


void ABaseBuildingActor::OnStopOverlapBuilding(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex) {
	materialInstance->SetVectorParameterValue(materialColorVariable, FColor::Green);
	bIsPlaceble = true;
}