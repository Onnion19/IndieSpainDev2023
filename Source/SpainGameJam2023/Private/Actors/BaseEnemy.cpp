// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Actors/BaseEnemy.h"
#include "Components/SphereComponent.h"
#include "Utils/CombatUtilsLibrary.h"
// Sets default values
ABaseEnemy::ABaseEnemy()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;

	mesh = CreateDefaultSubobject<UStaticMeshComponent>("Mesh");
	mesh->SetCollisionProfileName({ "NoCollision" });

	collider = CreateDefaultSubobject<USphereComponent>("Collider");
	collider->SetCollisionProfileName({ "Stellar" });
	collider->SetSimulatePhysics(true);
	collider->SetEnableGravity(false);
	RootComponent = collider;
	mesh->AttachToComponent(RootComponent, FAttachmentTransformRules{ EAttachmentRule::KeepRelative, false });

	collider->OnComponentHit.AddDynamic(this, &ABaseEnemy::OnHit);
	SetActorTickEnabled(false);
}

// Called when the game starts or when spawned
void ABaseEnemy::BeginPlay()
{
	Super::BeginPlay();

}

void ABaseEnemy::OnHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)
{
	OnHitBP(HitComponent, OtherActor, OtherComp, NormalImpulse, Hit);

	if (OtherActor->Implements<UCombatInterface>())
	{
		OnHitCombat(HitComponent, OtherActor, OtherComp, NormalImpulse, Hit);
		OnHitCombatBP(HitComponent, OtherActor, OtherComp, NormalImpulse, Hit);
	}

	Destroy();
}

void ABaseEnemy::OnHitCombat(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit)
{
	UCombatUtilsLibrary::ResolveCombatStatsByActors(this, OtherActor);
}

// Called every frame
void ABaseEnemy::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}

void ABaseEnemy::Activate()
{
	SetActorTickEnabled(true);
	ActivateBP();
}

void ABaseEnemy::DealDamage_Implementation(float ammount) const
{
	UE_LOG(LogTemp, Log, TEXT("Enemy %s, deal damage %d"), *(GetName()), ammount);
}

void ABaseEnemy::ReceiveDamage_Implementation(float ammount)
{
	UE_LOG(LogTemp, Log, TEXT("Enemy %s, received damage %d"), *(GetName()), ammount);
}

void ABaseEnemy::GetCombatStats_Implementation(FCombatStats& out) const
{
	out = combatStats;
}

void ABaseEnemy::SetCombatStats_Implementation(const FCombatStats& stats)
{
	combatStats = stats;
}

