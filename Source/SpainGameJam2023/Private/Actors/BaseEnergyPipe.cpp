// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Actors/BaseEnergyPipe.h"
#include "Components/BuildingEnergyNode.h"

// Sets default values
ABaseEnergyPipe::ABaseEnergyPipe()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = false;

	RootComponent = CreateDefaultSubobject<USceneComponent>("Root");
	mesh = CreateDefaultSubobject<UStaticMeshComponent>("Mesh");
	mesh->AttachToComponent(RootComponent, FAttachmentTransformRules{ EAttachmentRule::KeepRelative, false });
}

void ABaseEnergyPipe::ConnectRoot(UBuildingEnergyNode* new_root)
{
	root = new_root;
	UpdateMaterial();
}

void ABaseEnergyPipe::ConnectDestiny(UBuildingEnergyNode* new_destiny)
{
	destiny = new_destiny;
	UpdateDestinyEnergy();
}

void ABaseEnergyPipe::ConnectRootDestiny(UBuildingEnergyNode* new_root, UBuildingEnergyNode* new_destiny)
{
	ConnectRoot(new_root);
	ConnectDestiny(new_destiny);
	UpdateMeshLocation();
}

UBuildingEnergyNode* ABaseEnergyPipe::GetRoot() const
{
	return root;
}

UBuildingEnergyNode* ABaseEnergyPipe::GetDestiny() const
{
	return destiny;
}

void ABaseEnergyPipe::UpdateMeshLocation()
{
	if (!root || !destiny) return;
	UpdateMeshToConnectBP();

}

void ABaseEnergyPipe::DisconnectRoot()
{
	DisconnectRootBP();
	root = nullptr;
	UpdateDestinyEnergy();
}

void ABaseEnergyPipe::DisconnectDestiny()
{
	DisconnectDestinyBP();
	destiny = nullptr;
}

void ABaseEnergyPipe::DisconnectRootDestiny()
{
	DisconnectRoot();
	DisconnectDestiny();
}

void ABaseEnergyPipe::UpdateMaterial()
{
	if (materialInstance) {
		const float energy = (root) ? root->GetNodeEnergy() : 0.f;
		materialInstance->SetScalarParameterValue(materialEnergyVariable, energy);
	}
}

void ABaseEnergyPipe::UpdateDestinyEnergy()
{
	if (destiny)
	{
		const float energy = (root) ? root->GetNodeEnergy() : 0.f;
		destiny->SetEnergyIncome(energy);
	}
}

// Called when the game starts or when spawned
void ABaseEnergyPipe::BeginPlay()
{
	Super::BeginPlay();
	if (material)
	{
		materialInstance = UMaterialInstanceDynamic::Create(material, this);
		mesh->SetMaterial(0, materialInstance);
	}
	UpdateMaterial();
}

