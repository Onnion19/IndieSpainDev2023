// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Actors/BaseTurret.h"
#include "Components/StaticMeshComponent.h"
#include "Components/SphereComponent.h"

// Sets default values
ABaseTurret::ABaseTurret()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;

	RootComponent = CreateDefaultSubobject<USceneComponent>("Root");
	turretRangeCollider = CreateDefaultSubobject<USphereComponent>("AtttackRangeCollider");
	turretRangeCollider->AttachToComponent(RootComponent, FAttachmentTransformRules{ EAttachmentRule::KeepRelative, false });
	turretRangeCollider->SetCollisionProfileName("TurretRangeIndicator");

	turretRangeIndicator = CreateDefaultSubobject<UStaticMeshComponent>("AttackRangeVisible");
	turretRangeIndicator->AttachToComponent(turretRangeCollider, FAttachmentTransformRules{ EAttachmentRule::KeepRelative, false });
	turretRangeIndicator->SetCollisionEnabled(ECollisionEnabled::NoCollision);

}

// Called when the game starts or when spawned
void ABaseTurret::BeginPlay()
{
	Super::BeginPlay();

}

// Called every frame
void ABaseTurret::Tick(float DeltaTime)
{
	ensureMsgf(bIsActive, TEXT("Turret tick called while turret is deactivated"));
	Super::Tick(DeltaTime);
}


// ICombatInterface 

void ABaseTurret::DealDamage_Implementation(float ammount) const {

}

void ABaseTurret::ReceiveDamage_Implementation(float ammount) {
	onReceiveDamage.Broadcast(ammount);
}

FCombatStats ABaseTurret::GetCombatStats_Implementation() const {
	return combatStats;
}

void ABaseTurret::SetCombatStats_Implementation(const FCombatStats& stats) {
	combatStats = stats;
}

// ~ICombatInterface 

void ABaseTurret::Fire(AActor* target)
{
	if (target == nullptr) return;

	onFire.Broadcast(target);
}

void ABaseTurret::UpdateAttackRangeMesh(float arange) {
	turretRangeIndicator->SetWorldScale3D(FVector{ arange, arange, arange });
	const auto radius = static_cast<float>(turretRangeIndicator->GetStaticMesh()->GetBounds().SphereRadius);
	turretRangeCollider->SetSphereRadius(radius * arange);
	turretRangeCollider->SetRelativeLocation(FVector{ 0,0, radius * arange });

}

void ABaseTurret::ActivateTurret() {
	bIsActive = true;
	SetActorTickEnabled(true);
}

void ABaseTurret::DeactivateTurret() {
	bIsActive = false;
	SetActorTickEnabled(false);
}

void ABaseTurret::ShowAttackRangeIndicator() {
	turretRangeIndicator->SetVisibility(true, true);
}
void ABaseTurret::HideAttackRangeIndicator() {
	turretRangeIndicator->SetVisibility(false, true);
}
