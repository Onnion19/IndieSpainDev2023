// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Components/BuildingEnergyNode.h"
#include "Actors/BaseEnergyPipe.h"

// Sets default values for this component's properties
UBuildingEnergyNode::UBuildingEnergyNode()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = false;

	auto owner = GetOwner();
	if (owner)
	{
		owner->Tags.AddUnique(ENERGY_TAG);
	}
	// ...
}

void UBuildingEnergyNode::BeginPlay()
{
	Super::BeginPlay();
}

void UBuildingEnergyNode::NewOutPipe(ABaseEnergyPipe* pipe)
{
	if (pipe == inPipe)
	{
		UE_LOG(LogTemp, Warning, TEXT("Trying to make a cyclic pipe circuit"));
		return;
	}

	outPipes.AddUnique(pipe);
}

void UBuildingEnergyNode::NewInPipe(ABaseEnergyPipe* pipe)
{
	// Here probably need to update de graph if the inpipe changes (if we want to be a dynamic graph)
	inPipe = pipe;
}

void UBuildingEnergyNode::RemovePipe(ABaseEnergyPipe* pipe)
{
	outPipes.Remove(pipe);

	if (inPipe == pipe)
	{
		inPipe = nullptr;
	}
}

void UBuildingEnergyNode::GetOutPipes(TArray< ABaseEnergyPipe*>& pipes) const
{
	pipes = outPipes;
}

ABaseEnergyPipe* UBuildingEnergyNode::GetInPipe() const
{
	return inPipe;
}

void UBuildingEnergyNode::SetEnergyIncome(float energyLevel)
{
	incomingEnergy= energyLevel;
}

float UBuildingEnergyNode::GetEnergyConsumption() const
{
	return energyConsumption;
}

float UBuildingEnergyNode::GetNodeEnergy() const
{
	return incomingEnergy - energyConsumption;
}



