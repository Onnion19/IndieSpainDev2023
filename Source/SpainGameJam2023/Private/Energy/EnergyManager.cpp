// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Energy/EnergyManager.h"
#include <algorithm>

bool UEnergyManager::HasEnoughEnergy(float ammount)const {
	return accumulatedEnergy >= ammount;
}

void UEnergyManager::ConsumeEnergy(float ammount) {
	accumulatedEnergy = std::max(0.f, accumulatedEnergy - ammount);
}

void UEnergyManager::GenerateEnergy() {
	accumulatedEnergy = std::min(maxAccumulatedEnergy, accumulatedEnergy + generationRate);
}

void UEnergyManager::StartGenerationRate() {

	auto& timerManager = GetWorld()->GetTimerManager();
	if (timerManager.IsTimerActive(generationHandle)) {
		StopGenerationRate();
	}

	timerManager.SetTimer(generationHandle, this, &UEnergyManager::GenerateEnergy, generationTime, true, generationTime);
}

void UEnergyManager::StopGenerationRate() {
	GetWorld()->GetTimerManager().ClearTimer(generationHandle);
}

void UEnergyManager::SetGenerationRate(float newGenerationRate, bool updateTimer) {
	generationRate = newGenerationRate;
	if (updateTimer)
		StartGenerationRate();
}

float UEnergyManager::GetGenerationRate()const {
	return generationRate;
}

float UEnergyManager::GetAccumulatedEnergy()const {
	return accumulatedEnergy;
}

float UEnergyManager::GetMaxEnergy()const {
	return maxAccumulatedEnergy;
}

void UEnergyManager::DeltaMaxEnergy(float deltaAmmount) {
	maxAccumulatedEnergy += deltaAmmount;
}

void UEnergyManager::SetMaxEnergy(float newAmmount) {
	maxAccumulatedEnergy = newAmmount;
}