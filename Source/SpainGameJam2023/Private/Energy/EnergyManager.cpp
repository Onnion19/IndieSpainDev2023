// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Energy/EnergyManager.h"
#include <algorithm>




void UEnergyManager::ResetToDefaults()
{
	StopGenerationRate();
	generationTime = 0.5;
	generationRate = 0.5f;
	accumulatedEnergy = 0.f;
	maxAccumulatedEnergy = 10.f;
}

void UEnergyManager::OnChangeGameStage(EGameModeStage newStage)
{
	Super::OnChangeGameStage(newStage);

	if (newStage == EGameModeStage::COMBAT)
		StartGenerationRate();
	else
		StopGenerationRate();
}

bool UEnergyManager::HasEnoughEnergy(float ammount)const {
	return accumulatedEnergy >= ammount;
}

void UEnergyManager::ConsumeEnergy(float ammount) {
	accumulatedEnergy = std::max(0.f, accumulatedEnergy - ammount);

	OnEnergyChange.Broadcast(accumulatedEnergy, maxAccumulatedEnergy, generationRate);
}

void UEnergyManager::GenerateEnergy() {
	accumulatedEnergy = std::min(maxAccumulatedEnergy, accumulatedEnergy + generationRate);
	OnEnergyChange.Broadcast(accumulatedEnergy, maxAccumulatedEnergy, generationRate);
}

void UEnergyManager::StartGenerationRate() {

	auto& timerManager = GetWorld()->GetTimerManager();
	if (timerManager.IsTimerActive(generationHandle)) {
		StopGenerationRate();
	}

	timerManager.SetTimer(generationHandle, this, &UEnergyManager::GenerateEnergy, generationTime, true, generationTime);
}

void UEnergyManager::StopGenerationRate() {
	auto& timermanager = GetWorld()->GetTimerManager();
	if(timermanager.IsTimerActive(generationHandle))
		timermanager.ClearTimer(generationHandle);
}

void UEnergyManager::SetGenerationRate(float newGenerationRate, bool updateTimer) {
	generationRate = newGenerationRate;
	if (updateTimer)
		StartGenerationRate();
}

float UEnergyManager::GetGenerationRate()const {
	return generationRate;
}

float UEnergyManager::GetAccumulatedEnergy()const {
	return accumulatedEnergy;
}

float UEnergyManager::GetMaxEnergy()const {
	return maxAccumulatedEnergy;
}

void UEnergyManager::DeltaMaxEnergy(float deltaAmmount) {
	maxAccumulatedEnergy += deltaAmmount;
	OnEnergyChange.Broadcast(accumulatedEnergy, maxAccumulatedEnergy, generationRate);
}

void UEnergyManager::SetMaxEnergy(float newAmmount) {
	maxAccumulatedEnergy = newAmmount;
	OnEnergyChange.Broadcast(accumulatedEnergy, maxAccumulatedEnergy, generationRate);
}