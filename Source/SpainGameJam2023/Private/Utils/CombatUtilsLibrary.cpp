// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Utils/CombatUtilsLibrary.h"
#include <algorithm>


float UCombatUtilsLibrary::ResolveCombatStats(const FCombatStats& dealer, const FCombatStats& receiver)
{
	const float flatDamage = dealer.damage * (1.f - dealer.piercingDamagePercent);
	const float piercingDamage = dealer.damage * (dealer.piercingDamagePercent);

	const float damageDealt = std::max(flatDamage - receiver.defense, 0.f) + piercingDamage;

	return damageDealt;
}



void UCombatUtilsLibrary::ResolveCombatStatsByActors(AActor* dealer, AActor* receiver)
{
	if (!dealer || !receiver) return;
	if (!dealer->Implements<UCombatInterface>() || !receiver->Implements<UCombatInterface>())
	{
		UE_LOG(LogTemp, Warning, TEXT("Either Receiver or Dealer does not implement UCombatInterface"));
		return;
	}


	TScriptInterface<ICombatInterface> d{ dealer };
	TScriptInterface<ICombatInterface> r{ receiver };

	FCombatStats d_s{}; d->Execute_GetCombatStats(dealer, d_s);
	FCombatStats r_s{}; r->Execute_GetCombatStats(receiver, r_s);

	const auto damage = ResolveCombatStats(d_s, r_s);
	UE_LOG(LogTemp, Log, TEXT("%s Deals damage %d to %s"), *(dealer->GetName()) , damage, *(receiver->GetName()));
	d->Execute_DealDamage(dealer, damage);
	r->Execute_ReceiveDamage(receiver, damage);
}


void UCombatUtilsLibrary::ResolveMultipleCombatStatsByActors(AActor* dealer, TArray<AActor*> receivers)
{
	std::for_each(receivers.begin(), receivers.end(), [&](const auto r) {UCombatUtilsLibrary::ResolveCombatStatsByActors(dealer, r); });
}

FCombatStats UCombatUtilsLibrary::Multiply(const FCombatStats& stats, float multiplier)
{
	return {
		stats.health * multiplier,
		stats.damage * multiplier,
		stats.attackSpeed * multiplier,
		stats.defense * multiplier,
		stats.piercingDamagePercent * multiplier,
		stats.requiredEnergy,
		stats.team
	};
}

FCombatStats UCombatUtilsLibrary::Add(const FCombatStats& a, const FCombatStats& b)
{
	return {
		a.health + b.health,
		a.damage + b.damage,
		a.attackSpeed + b.attackSpeed,
		a.defense + b.defense,
		a.piercingDamagePercent + b.piercingDamagePercent,
		a.requiredEnergy,
		a.team
	};
}

FCombatStats UCombatUtilsLibrary::Withdraw(const FCombatStats& a, const FCombatStats& b)
{
	return {
		a.health - b.health,
		a.damage - b.damage,
		a.attackSpeed - b.attackSpeed,
		a.defense - b.defense,
		a.piercingDamagePercent - b.piercingDamagePercent,
		a.requiredEnergy,
		a.team
	};
}
