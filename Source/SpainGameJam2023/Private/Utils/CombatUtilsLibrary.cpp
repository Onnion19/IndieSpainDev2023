// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.


#include "Utils/CombatUtilsLibrary.h"
#include <algorithm>


float UCombatUtilsLibrary::ResolveCombatStats(const FCombatStats& dealer, const FCombatStats& receiver)
{
	const float flatDamage = dealer.damage * (1.f - dealer.piercingDamagePercent);
	const float piercingDamage = dealer.damage * (dealer.piercingDamagePercent);

	const float damageDealt = std::max(flatDamage - receiver.defense, 0.f) + piercingDamage;

	return damageDealt;
}



void UCombatUtilsLibrary::ResolveCombatStatsByActors(TScriptInterface<ICombatInterface> dealer, TScriptInterface<ICombatInterface> receiver)
{
	if (dealer == nullptr || receiver == nullptr) return;

	const auto damage = ResolveCombatStats(dealer->GetCombatStats(), receiver->GetCombatStats());
	dealer->DealDamage(damage);
	receiver->ReceiveDamage(damage);
}


void UCombatUtilsLibrary::ResolveMultipleCombatStatsByActors(TScriptInterface<ICombatInterface> dealer, TArray<TScriptInterface<ICombatInterface>> receiver)
{
	std::for_each(receiver.begin(), receiver.end(), [&](const auto r) {UCombatUtilsLibrary::ResolveCombatStatsByActors(dealer, r); });
}