// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Pawn.h"
#include "BuildingPawn.generated.h"

DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnIsBuildingChange);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnBuildingObjectListChange);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnHoverCombatActor, AActor*, selected);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnStopHoverCombatActor);


UCLASS()
class SPAINGAMEJAM2023_API ABuildingPawn : public APawn
{
	GENERATED_BODY()

public:
	// Sets default values for this pawn's properties
	ABuildingPawn();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	UFUNCTION(BlueprintNativeEvent)
	void SpaceBarPressed();
	void SpaceBarPressed_Implementation();

	UFUNCTION()
	void OnGameStageChange(EGameModeStage stage);

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	UFUNCTION(BlueprintCallable)
	void PickBuildingObject(TSubclassOf<class APlaceableBaseActor> object);


	UFUNCTION(BlueprintCallable)
	void PlaceCurrentActor();

	UFUNCTION(BlueprintCallable)
	void SetIsBuidling(bool flag);

	UFUNCTION(BlueprintCallable)
	bool GetIsBuidling() const;

	UFUNCTION(BlueprintCallable)
	void AddBuildingObject(TSubclassOf<class APlaceableBaseActor> object, TSubclassOf<class ABaseBuildingActor> placeholder);

	UFUNCTION(BlueprintCallable)
	void RemoveBuildingObject(TSubclassOf<class APlaceableBaseActor> object);

	UFUNCTION(BlueprintCallable)
	void SelectActor(AActor* actor);
protected: 

	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "Building")
	TMap<TSubclassOf<class APlaceableBaseActor>, TSubclassOf<class ABaseBuildingActor>> buildingModels;

	UPROPERTY(VisibleAnywhere, Category = "Building")
	TSubclassOf<class APlaceableBaseActor> selectedActorClass;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Building")
	class ABaseBuildingActor* currentObject;

	UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category = "Building")
	bool isBuilding = false;


	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Runtime")
	AActor* selectedActor;

private:
	void PerformRayTraceBuildingActor(const FVector& location, const FVector& direction);
	void PerformRayTraceCombatActor(const FVector& location, const FVector& direction);
public:

	UPROPERTY(BlueprintAssignable)
	FOnIsBuildingChange onStartBuildingMode;

	UPROPERTY(BlueprintAssignable)
	FOnIsBuildingChange onStopBuildingMode;

	UPROPERTY(BlueprintAssignable)
	FOnBuildingObjectListChange onChangedList;

	UPROPERTY(BlueprintAssignable)
	FOnHoverCombatActor onHoverCombatActor;
	UPROPERTY(BlueprintAssignable)
	FOnStopHoverCombatActor onStopHoverCombatActor;
};
