// All code generated by Aleix Rius for the Indie Spain Dev 2023. The code is delivered as is.

#pragma once

#include "CoreMinimal.h"
#include "UObject/NoExportTypes.h"
#include "BaseManager.h"
#include "EnergyManager.generated.h"


DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FEnergyChangeSignature, float, currentEnergy, float, maxEnergy, float, regeneration);

/**
 *
 */
UCLASS()
class SPAINGAMEJAM2023_API UEnergyManager : public UBaseManager
{
	GENERATED_BODY()
public:

	UFUNCTION(BlueprintCallable)
	bool HasEnoughEnergy(float ammount)const;

	UFUNCTION(BlueprintCallable)
	void ConsumeEnergy(float ammount);

	UFUNCTION()
	void GenerateEnergy();

	UFUNCTION(BlueprintCallable)
	void StartGenerationRate();

	UFUNCTION(BlueprintCallable)
	void StopGenerationRate();

	UFUNCTION(BlueprintCallable)
	void SetGenerationRate(float newGenerationRate, bool update);

	UFUNCTION(BlueprintCallable)
	float GetGenerationRate()const;

	UFUNCTION(BlueprintCallable)
	float GetAccumulatedEnergy()const;

	UFUNCTION(BlueprintCallable)
	float GetMaxEnergy()const;

	UFUNCTION(BlueprintCallable)
	void DeltaMaxEnergy(float deltaAmmount);

	UFUNCTION(BlueprintCallable)
	void SetMaxEnergy(float newAmmount);

	UFUNCTION(BlueprintCallable)
	void ResetToDefaults();

	void OnChangeGameStage(EGameModeStage newStage) override;

protected:

	// Energy will be generate every <generationTime> (seconds) at a <generationRate> rate
	UPROPERTY()
	float generationTime = 0.5f;

	UPROPERTY(BlueprintReadOnly, VisibleAnywhere)
	float generationRate = 0.5f;

	// Generated energy will get accumulated over time:
	UPROPERTY(BlueprintReadOnly, VisibleAnywhere)
	float accumulatedEnergy = 0.f;

	UPROPERTY(BlueprintReadOnly, VisibleAnywhere)
	float maxAccumulatedEnergy = 10.f;

	UPROPERTY()
	FTimerHandle generationHandle;

public:

	UPROPERTY(BlueprintAssignable)
	FEnergyChangeSignature OnEnergyChange;
};
